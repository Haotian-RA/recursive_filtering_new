./test.sh run_filter4.cpp
Invariant TSC detected - TSC runs at constant frequency
Base CPU frequency: 1.4 GHz
Max CPU frequency: 4.5 GHz
Calibrating CPU frequency using TSC...
CPU frequency calibrated: 2.99505 GHz
Note: Calibrated frequency is TSC frequency (constant), CPU may boost higher
Using frequency for timing calculations: 2.99505 GHz

PMC Core cycle counter initialized successfully

=== CONFIGURATION ===
vector_size = 131072, block_size = 8, IIR filter order = 16, iterations = 10000

=== TIMING RESULTS ===
Wall-clock timing:
  raw avg time:      327541 ns
  loop overhead:     1.71 ns
  adjusted avg time: 327539 ns

TSC timing:
  total TSC cycles:      9.81019e+09
  avg TSC cycles/iter:   981014
  avg TSC cycles/sample: 7.48454
  expected avg time:     327545 ns  (using TSC_HZ=2.99505 GHz)

Core cycle timing (PMC):
  total core cycles:     14624527578
  avg core cycles/iter:  1.46245e+06
  avg core cycles/sample:11.1576
  (Note: Core frequency may be higher than TSC frequency due to boost)

=== COMPARISON WITH PREDICTIONS ===
Predicted cycles/sample (from measurements): 87.669
Expected total time: 3.83665e+06 ns (using TSC_HZ=2.99505 GHz)

=== MEASUREMENT COMPARISON ===
Wall-clock vs TSC time difference: 5.97735 ns (0.00182493%)
TSC cycles/sample vs Predicted: 7.48454 vs 87.669 (difference: 80.1845)
Core cycles/sample vs Predicted: 11.1576 vs 87.669 (difference: 76.5114)
TSC vs Core cycles ratio: 1.49076 (>1 means core is boosting)

=== CONCLUSION ===
Core cycle measurement should match PMCTest 'Core cyc' results
Core cycles/sample: 11.1576 (compare with PMCTest)


Excellent results! This perfectly demonstrates the TSC vs Core cycle difference on Meteor Lake. Let me explain what's happening:
Understanding the Numbers
Your results show:

TSC cycles/sample: 7.48 (constant 2.995 GHz frequency)
Core cycles/sample: 11.16 (boosted ~4.5 GHz frequency)
Ratio: 1.49x (core runs 49% faster than TSC)
PMCTest: ~11 cycles/sample ✅ matches your core cycles!

Key Differences Explained
1. TSC vs Core Cycles
TSC (Time Stamp Counter):

Runs at fixed reference frequency (2.995 GHz)
Measures elapsed time in "time units"
Constant rate regardless of CPU boost

Core Cycles:

Counts actual CPU core clock cycles
Varies with frequency scaling/boost (up to 4.5 GHz)
Measures computational work done

2. Why They Were Same on Older CPUs
Haswell/Skylake era:
TSC frequency ≈ Base core frequency ≈ Max frequency
Example: 3.0 GHz TSC ≈ 3.0 GHz core
Modern CPUs (Meteor Lake/Alder Lake):
TSC frequency: Fixed ~3.0 GHz (reference)
Core frequency: Variable 1.4-4.5 GHz (boost)
Intel separated TSC from core clocks for better power management and more consistent timekeeping.
3. Which One Should You Look At?
Depends on your goal:
MetricUse WhenWhat It Tells YouWall-clock timeReal-world performanceActual execution timeTSC cyclesCross-platform timingTime-equivalent workCore cyclesAlgorithm efficiencyComputational work done
4. What Reflects "Real Execution Time"?
Wall-clock time (327.5 μs) reflects real execution time.
Both TSC and core cycles can be converted to time:

TSC: 7.48 cycles ÷ 2.995 GHz = 2.5 ns/sample
Core: 11.16 cycles ÷ 4.47 GHz = 2.5 ns/sample

They give the same time but via different frequencies!
5. Why Boost Gives "Bigger" Cycle Numbers
Higher frequency = More cycles per unit time = Better performance
Example for 100ns of work:

3.0 GHz: 300 cycles
4.5 GHz: 450 cycles

450 cycles ≠ slower! It's faster because more work was done in the same 100ns.
Practical Recommendations
For Your Vector Performance Analysis:

Use Core Cycles (11.16) - matches PMCTest's "Core cyc"
Compare against PMCTest - your measurements now align!
Wall-clock time for real-world impact
TSC cycles for cross-platform consistency

Why Your Previous Measurements Seemed "Wrong":

Meteor Lake TSC: 7.48 cycles/sample (undercounting)
Haswell/Skylake: TSC ≈ Core cycles (accurate)
PMCTest Core: 11.16 cycles/sample (accurate on all CPUs)

Bottom line: Your core cycle measurement (11.16) is the accurate one that reflects actual computational work and matches PMCTest. The TSC measurement (7.48) was systematically low due to the frequency difference that exists on modern Intel CPUs but didn't exist on older ones.
